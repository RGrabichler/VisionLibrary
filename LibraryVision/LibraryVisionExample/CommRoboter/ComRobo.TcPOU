<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="ComRobo" Id="{f54a9727-d3c7-0bef-2d19-dc86a15ae5d0}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK ComRobo
VAR_IN_OUT
    _msgSend : uTelegrammTCP;
    _msgRcv  : uTelegrammTCP;
END_VAR
VAR
    _sRemoteHost     : STRING            := '192.168.3.208';
    _serverPort      : UDINT             := 7000;
    eStep            : E_ConnectionSteps := E_ConnectionSteps.eCONNECTION_STATE_IDLE;
    _bEnable         : BOOL              := TRUE;
    _comTrig         : Tc2_Standard.f_TRIG;
    _comStatus       : BOOL;
    _bConnected      : BOOL;
    _bDisconnect     : BOOL;
    fbServerCon      : Tc2_TcpIp.FB_ClientServerConnection;
    fbSend           : Tc2_TcpIp.FB_SocketSend;
    fbRceive         : Tc2_TcpIp.FB_SocketReceive;
    cbLen            : UDINT;
    bExecute         : BOOL;
    tTimeout         : TIME                    := T#2S;
    eState           : E_SocketConnectionState := eSOCKET_DISCONNECTED;
    sSrvNetId        : T_AmsNetId              := '';
    hSocket          : T_HSOCKET;
    bExecuteRec      : BOOL;
    bBusy            : BOOL;
    bError           : BOOL;
    nErrId           : UDINT;
    nRecBytes        : UDINT;
    _hbOld           : INT := 0;
    _hb              : INT;
    _hbErrCoun       : INT;
    index            : uINT;
    _reset           : BOOL;
    fbPollTimer      : Tc2_Standard.TON := (PT := TIME#10MS); (* Receive poll timer *)
    fbReconnectTimer : Tc2_Standard.TON := (pt := TIME#1S);
    fbResponseTimer  : Tc2_Standard.TON := (pt := TIME#160MS); (* Response timeout timer *)
    fbTimeOut        : Tc2_Standard.TON := (pt := TIME#2S);    //Time OUt für ANtwort
    reconnectTime    : TIME             := T#1S;
    _index           : INT              := 0;
    _dataRcv         : Tc2_Standard.R_TRIG;
    _bConnectedTrig  : Tc2_Standard.R_TRIG;
    _n               : INT;
    _ErrorCycle      : UDINT;
    faultID          : FaultHandling;
END_VAR
VAR CONSTANT
    hbError : INT := 5;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[
IF NOT _bConnected THEN
    mClearData();
END_IF

IF _comTrig.Q THEN
    //    fbReconnectTimer(pt := T#0MS);
    IF _comStatus THEN
        _comStatus := FALSE;
        _bEnable   := FALSE;
    ELSE
        _bEnable   := TRUE;
        _comStatus := true;
    END_IF

    //else
    //    fbReconnectTimer(pt := t#5s);
END_IF

//StateMachine f+ür die TCP/IP Com
//Solange Enable true, versucht der Baustein eine Verbindung aufzubauen
//Gesamte Zeitüberwachung für bEnable und keine Verbindung, -> als Error an HMI
fbPollTimer(in := NOT fbPollTimer.Q);
fbResponseTimer(in := NOT fbResponseTimer.Q);

CASE eStep OF
    eCONNECTION_STATE_IDLE:
        IF _bEnable XOR _bConnected THEN
            IF _bEnable THEN
                fbReconnectTimer(in := TRUE);

                IF fbReconnectTimer.Q THEN
                    _bDisconnect := FALSE;
                    nRecBytes    := 0;
                    fbReconnectTimer(in := FALSE, pt := reconnectTime);
                    estep := eCONNECTION_STATE_CONNECT_START;
                END_IF
            ELSE
                estep := eCONNECTION_STATE_CLOSE_START;
            END_IF
        ELSIF _bConnected THEN
            estep := eCONNECTION_STATE_DATAEXCHANGE;
        ELSE
            fbReconnectTimer(in := FALSE);
        END_IF
    eCONNECTION_STATE_CONNECT_START:
        cbLen := SIZEOF(_msgSend.aTel) + 1;
        //Rücksetzten Heartbeat
        _hb        := 0;
        _hbOld     := 0;
        _hbErrCoun := 0;

        fbServerCon
        (
            sSrvNetID     :=
            , nMode       := Tc2_TcpIp.CONNECT_MODE_ENABLEDBG
            , sRemoteHost := _sRemoteHost
            , nRemotePort := _serverPort
            , bEnable     := _bEnable
            , tReconnect  := reconnectTime
            , bBusy       => bBusy
            , bError      => bError
            , nErrId      => nErrId
            , hSocket     => hSocket
            , eState      => eState
        );

        IF NOT fbServerCon.bBusy THEN
            IF NOT fbServerCon.bError THEN
                _n := _n + 1;

                IF _n >= 2 THEN
                    _n          := 0;
                    _bConnected := TRUE;

                    Tc2_System.ADSLOGSTR
                    (
                        msgCtrlMask := Tc2_System.ADSLOG_MSGTYPE_WARN
                        , msgFmtStr := 'Connection via TCP/IP established mit %s! '
                        , strArg    := 'Omron Rob'
                    );

                    faultID.FaultID := 0;
                END_IF

                eStep := eCONNECTION_STATE_IDLE;
            ELSE
                Tc2_System.ADSLOGSTR
                (
                    msgCtrlMask := Tc2_System.ADSLOG_MSGTYPE_WARN
                    , msgFmtStr := 'fbServerCon geht nicht %s'
                    , strArg    := UDINT_TO_STRING(fbServerCon.nErrId)
                );

                // Fehler, dass die Connection nicht zustande kommt fürs HMI
                // Lösung vermutlihc, Omron Comm-Programm muss neugestartet werden,
                // da ein Heartbeat FEhler vorliegt
                _bConnectedTrig(clk := _bConnected);
                faultID.FaultID := 10;
                eStep           := eCONNECTION_STATE_ERROR;
                _n              := 0;
            END_IF
        END_IF
    eCONNECTION_STATE_DATAEXCHANGE:
        _bDisconnect := NOT _bEnable OR _bDisconnect; //(kann aufs Hmi gelegt werden

        IF _bDisconnect AND NOT (fbSend.bBusy OR fbRceive.bBusy) THEN
            _bDisconnect := FALSE;
            eStep        := eCONNECTION_STATE_CLOSE_START;
        ELSE
            //Sender der Daten
            IF NOT (_bDisconnect OR fbSend.bBusy) THEN
                IF fbResponseTimer.q AND NOT fbRceive.bBusy THEN
                    fbSend(bExecute := FALSE);

                    fbSend
                    (
                        sSrvNetId  := sSrvNetId
                        , hSocket  := fbServerCon.hSocket
                        , cbLen    := cbLen
                        , pSrc     := ADR(_msgSend.aTel)
                        , bExecute := TRUE
                        , tTimeout := tTimeout
                        , bBusy    => bBusy
                        , bError   => bError
                        , nErrId   => nErrId
                    );
                END_IF
            ELSE
                fbSend(bExecute := FALSE);

                IF fbSend.bError THEN
                    Tc2_System.ADSLOGSTR
                    (
                        msgCtrlMask := Tc2_System.ADSLOG_MSGTYPE_WARN
                        , msgFmtStr := 'fbSend %s'
                        , strArg    := UDINT_TO_STRING(fbServerCon.nErrId)
                    );
                END_IF
            END_IF

            //===================Recieve Data =================================
            IF NOT (_bDisconnect OR fbRceive.bBusy) THEN
                IF fbPollTimer.Q THEN
                    fbRceive(bExecute := FALSE);

                    fbRceive
                    (
                        sSrvNetId   := sSrvNetId
                        , hSocket   := fbServerCon.hSocket
                        , cbLen     := cbLen
                        , pDest     := ADR(_msgRcv.aTel)
                        , bExecute  := TRUE
                        , tTimeout  := tTimeout
                        , bBusy     => bBusy
                        , bError    => bError
                        , nErrId    => nErrId
                        , nRecBytes =>
                    );

                    // CHekcehn des HEartbeats, ob Änderungen da sind
                    _hb := BYTE_TO_INT(_msgRcv.stTel.myStats[3]);
                    fbRceive(nRecBytes => nRecBytes);

                    IF _hb = _hbOld THEN
                        fbTimeOut(in := TRUE);
                    ELSE
                        fbTimeOut(in := false);
                    END_IF

                    IF nRecBytes <> 0 THEN
                        IF _hb = _hbOld THEN
                            _hbErrCoun := _hbErrCoun + 1;

                            IF _hbErrCoun > 2 THEN
                                _ErrorCycle := _ErrorCycle + 1;
                            end_if
                        ELSIF _hb <> _hbOld OR _hb = 0 THEN
                            _hbErrCoun                := 0;
                            _msgSend.stTel.myStats[3] := INT_TO_BYTE(_hb);
                        END_IF
                    END_IF

                    //===========================================================
                    //=========================================================
                    IF _hbErrCoun > hbError OR fbTimeOut.q THEN
                        _bDisconnect := TRUE;

                        //                        //                        mClearData();
                        FOR index := 1 TO UDINT_TO_UINT(cbLen) DO
                            _msgRcv.aTel[index] := 0;
                        END_FOR

                        Tc2_System.ADSLOGSTR
                        (
                            msgCtrlMask := Tc2_System.ADSLOG_MSGTYPE_WARN
                            , msgFmtStr := 'HEartBeat Fehler, Verbindung verloren'
                            , strArg    := ''
                        );
                    END_IF

                    _hbOld := _hb;
                END_IF
            ELSE
                fbRceive(bExecute := FALSE);

                IF NOT fbRceive.bError THEN
                    //watchdog von Omron, "HEartBeat"
                    //                    _msgSend.stTel.myStats[5] := _msgRcv.stTel.myStats[5];
                ELSE
                    _bDisconnect := TRUE;

                    Tc2_System.ADSLOGSTR
                    (
                        msgCtrlMask := Tc2_System.ADSLOG_MSGTYPE_WARN
                        , msgFmtStr := 'fbSocketRec %s'
                        , strArg    := UDINT_TO_STRING(fbRceive.nErrId)
                    );
                END_IF
            END_IF
        END_IF
    eCONNECTION_STATE_CLOSE_START:
        Tc2_System.ADSLOGSTR
        (
            msgCtrlMask := Tc2_System.ADSLOG_MSGTYPE_WARN
            , msgFmtStr := 'Verbindung mit Omron wird geschlossen'
            , strArg    := ''
        );

        fbServerCon(bEnable := FALSE);
        fbTimeOut(in := FALSE);

        IF NOT fbServerCon.bBusy THEN
            _bConnected := FALSE;

            IF NOT fbServerCon.bError THEN
                eStep := eCONNECTION_STATE_IDLE;
            ELSE
                Tc2_System.ADSLOGSTR
                (
                    msgCtrlMask := Tc2_System.ADSLOG_MSGTYPE_WARN
                    , msgFmtStr := 'fbSocketClose %s'
                    , strArg    := UDINT_TO_STRING(fbServerCon.nErrId)
                );

                eStep := eCONNECTION_STATE_ERROR;
            END_IF
        END_IF
    eCONNECTION_STATE_ERROR: (* Error step *)
        IF _bConnected THEN
            eStep := eCONNECTION_STATE_CLOSE_START;
        ELSE
            eStep := eCONNECTION_STATE_IDLE;
        END_IF
END_CASE]]></ST>
    </Implementation>
    <Method Name="mClearData" Id="{c1542829-77d0-0e84-1cc2-92d4fd7bb42f}">
      <Declaration><![CDATA[METHOD PRIVATE mClearData : BOOL
VAR
    _index : UINT;
END_VAR

]]></Declaration>
      <Implementation>
        <ST><![CDATA[// The warning can be disabled here as the user is aware of the risk that the reference may not be valid by checking its validity
{warning disable C0371}
IF NOT __ISVALIDREF(_msgRcv) THEN
     RETURN;
END_IF

FOR _index := 1 TO SIZEOF(_msgRcv) DO
    _msgRcv.aTel[_index] := 0;
END_FOR

// The warning may be restored at the end of the access area
{warning restore C0371}]]></ST>
      </Implementation>
    </Method>
    <Method Name="mTestComCauseOfErr" Id="{31e7a23d-52c4-087b-36e0-fbac9ad6716e}">
      <Declaration><![CDATA[METHOD PRIVATE mTestComCauseOfErr : BOOL
VAR_INST
    i : INT;
    fbTon : Tc2_Standard.TON;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[//wird später gelöscht

////Dient dem TEst, warum die Verbindung manchmal abbricht
//fbTon(in := NOT fbTon.Q, pt := T#500MS);

//IF fbton.Q THEN
//    FOR i := 1 TO 12 DO
//        IF gIOs._msgSend.stTel.myBool[i] THEN
//            gIOs._msgSend.stTel.myBool[i] := 0;
//        ELSE
//            gIOs._msgSend.stTel.myBool[i] := 1;
//        END_IF
//    END_FOR


//FOR i := 1 TO 8 DO
//    IF gIOs._msgSend.stTel.myBool[i] THEN
//        gIOs._msgSend.stTel.myInt[i] := gIOs._msgSend.stTel.myInt[i] + 1;

//    END_IF
//END_FOR

//END_IF]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>