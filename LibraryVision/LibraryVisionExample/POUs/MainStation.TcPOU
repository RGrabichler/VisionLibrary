<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="MainStation" Id="{39734a4c-3ca6-4cf0-a64d-d2b9690f49f5}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK MainStation EXTENDS TcoCore.TcoObject
VAR
    counter : INT;

    _IvController            : LibraryVision.IVController(THIS^);
    _trigger                 : BOOL;
    _triggerR                : Tc2_Standard.R_TRIG;
    _coordinate              : BOOL;
    _coordinates             : ARRAY[0..2] OF LibraryVision.Coordinates;
    _distanceFromObject      : LREAL;
    _fieldOfView             : FieldOfView;
    _coordinatesInMillimeter : LREAL;
    _calculate               : BOOL;
END_VAR

VAR
    _comRob : ComRobo;

    _communicationStruct : ComRob;
    _msgToSend           : uTelegrammTCP;
    _msgReceive          : uTelegrammTCP;

    _arrayOfPositionValuesX                 : ARRAY[1..SIZE] OF INT;
    _arrayOfPositionValuesY                 : ARRAY[1..SIZE] OF INT;
    _arrayOfPositionValuesTheta             : ARRAY[1..SIZE] OF INT;
    _arrayOfPositionValuesInMillimeterX     : ARRAY[1..SIZE] OF INT;
    _arrayOfPositionValuesInMillimeterY     : ARRAY[1..SIZE] OF INT;
    _arrayOfPositionValuesInMillimeterTheta : ARRAY[1..SIZE] OF INT;

    _index          : INT;
    _count          : INT;
    _aggrvValueX    : INT;
    _aggrevatedMidX : LREAL;
    _aggrvValueY    : INT;
    _aggrevatedMidY : LREAL;
END_VAR
VAR CONSTANT
    SIZE           : INT  := 30;
    SIZE_OF_PALLET : UINT := 27; // 9 reihen, 3 columns
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[counter := counter + 1;

IF (THIS^.counter MOD 13 = 0) THEN
    THIS^.Messenger.Info('opalalla').Pin();
END_IF

IF (THIS^.counter MOD 400 = 0) THEN
    THIS^.Messenger.Error('ich Poste').Pin();
END_IF

_IvController();

_triggerR(clk := _communicationStruct.in.TakeFoto);

IF _triggerR.Q THEN
    _trigger := TRUE;
END_IF

IF NOT _communicationStruct.in.TakeFoto THEN
    _communicationStruct.out.FotoDone := FALSE;
END_IF

IF _trigger THEN
    IF _IvController.TriggerSensorMethod().Done THEN
        _trigger    := FALSE;
        _coordinate := TRUE;

    end_if
END_IF

IF _coordinate THEN
    IF _IvController.ReadTool1CoordinatesMethod().Done
           and _IvController.ReadTool2CoordinatesMethod().Done
           and _IvController.ReadTool3CoordinatesMethod().Done THEN
        _coordinate     := FALSE;
        _coordinates[0] := _IvController.RawCoordinatesTool1;
        _coordinates[1] := _IvController.RawCoordinatesTool2;
        _coordinates[2] := _IvController.RawCoordinatesTool3;

        _arrayOfPositionValuesX[_communicationStruct.out.PalletPickIndex]     := DINT_TO_INT(_coordinates[0].xValue);
        _arrayOfPositionValuesY[_communicationStruct.out.PalletPickIndex]     := DINT_TO_INT(_coordinates[0].yValue);
        _arrayOfPositionValuesTheta[_communicationStruct.out.PalletPickIndex] :=
            DINT_TO_INT(_coordinates[0].variableValue);

        _calculate := TRUE;
    END_IF
END_IF

IF _calculate THEN
    IF _IvController.CalculationMethod().Done THEN
        _calculate          := FALSE;
        _distanceFromObject := _IvController.CalculationTask.DistanceFromObject;
        _fieldOfView        := _IvController.CalculationTask.FieldOfView;

        _arrayOfPositionValuesInMillimeterX[_communicationStruct.out.PalletPickIndex] :=
            DINT_TO_INT(_IvController.CalculationTask.CoordinatesInMillimeter.xValue);

        _arrayOfPositionValuesInMillimeterY[_communicationStruct.out.PalletPickIndex] :=
            DINT_TO_INT(_IvController.CalculationTask.CoordinatesInMillimeter.yValue);

        _arrayOfPositionValuesInMillimeterTheta[_communicationStruct.out.PalletPickIndex] :=
            DINT_TO_INT(_IvController.CalculationTask.CoordinatesInMillimeter.variableValue);

        _communicationStruct.out.FotoDone := TRUE;
        PositionCorrectionFactor();
        //        IF  _communicationStruct.in.RowPallet <> 0 THEN
        _communicationStruct.out.PalletPickIndex := _communicationStruct.out.PalletPickIndex + 1;

    END_IF

    IF _communicationStruct.out.PalletPickIndex >= SIZE_OF_PALLET THEN

        FOR _index := 1 TO SIZE_OF_PALLET DO
            IF _arrayOfPositionValuesInMillimeterX[_index] <> 0 THEN
                _aggrvValueX := _aggrvValueX + _arrayOfPositionValuesInMillimeterX[_index];
                _aggrvValueY := _aggrvValueY + _arrayOfPositionValuesInMillimeterY[_index];
                _count       := _count + 1;
            END_IF
        END_FOR

        _aggrevatedMidX := _aggrvValueX / _count;
        _aggrevatedMidY := _aggrvValueY / _count;

        _communicationStruct.out.PalletPickIndex := 0;

    END_IF
END_IF

RunCommunication();
]]></ST>
    </Implementation>
    <Folder Name="Communication" Id="{3b8326c8-7cba-0687-047d-2ad57cbc88e9}" />
    <Method Name="MapComRob" Id="{d90f86a2-9d57-012a-105a-09ac3b799b31}" FolderPath="Communication\">
      <Declaration><![CDATA[METHOD PRIVATE MapComRob : BOOL
VAR_INST
    _start :BOOL;
    n : INT;

    _powerOn : BOOL;
    _powerOnTr : Tc2_Standard.R_TRIG;
    _powerOffTr : Tc2_Standard.R_TRIG;
    sigTimer : Tc2_Standard.TON;
    sigTime : TIME := T#1000MS;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[//TCP IP Komm
////==========in
_communicationStruct.in.TakeFoto := INT_TO_BOOL(_msgReceive.stTel.myBool[1]);
//_communicationStruct.in.Fault             := INT_TO_BOOL(_msgReceive.stTel.myBool[2]);
//_communicationStruct.in.HomePosReached    := INT_TO_BOOL(_msgReceive.stTel.myBool[3]);
//_communicationStruct.in.contactReq        := INT_TO_BOOL(_msgReceive.stTel.myBool[4]);
//_communicationStruct.in.StatusRunning     := INT_TO_BOOL(_msgReceive.stTel.myBool[5]);
//_communicationStruct.in.PowerOn           := INT_TO_BOOL(_msgReceive.stTel.myBool[6]);
//_communicationStruct.in.Estop             := INT_TO_BOOL(_msgReceive.stTel.myBool[7]);
//_communicationStruct.in.ContactGrasped    := INT_TO_BOOL(_msgReceive.stTel.myBool[8]);
//_communicationStruct.in.SectionClearTable := INT_TO_BOOL(_msgReceive.stTel.myBool[9]);
//_communicationStruct.in.CoilDone          := INT_TO_BOOL(_msgReceive.stTel.myBool[10]);
_communicationStruct.in.PalletIndexPick := _msgReceive.stTel.myInt[1];
_communicationStruct.in.RowPallet       := _msgReceive.stTel.myInt[2];
///==================== OUT
//_msgToSend.stTel.myBool[1]  := BOOL_TO_INT(_communicationStruct.out.ModeAuto);
//_msgToSend.stTel.myBool[2]  := BOOL_TO_INT(_communicationStruct.out.stopRun);
//_msgToSend.stTel.myBool[3]  := BOOL_TO_INT(_communicationStruct.out.reset);
//_msgToSend.stTel.myBool[4]  := BOOL_TO_INT(_communicationStruct.out.contactReady);
//_msgToSend.stTel.myBool[5]  := BOOL_TO_INT(_communicationStruct.out.contactPunched);
//_msgToSend.stTel.myBool[6]  := BOOL_TO_INT(_communicationStruct.out.homePosReq);
//_msgToSend.stTel.myBool[7]  := BOOL_TO_INT(_communicationStruct.out.tableInPos);
//_msgToSend.stTel.myBool[8]  := BOOL_TO_INT(_communicationStruct.out.HighPowerOn);
//_msgToSend.stTel.myBool[9]  := BOOL_TO_INT(_communicationStruct.out.HighPowerOff);
//_msgToSend.stTel.myBool[11] := BOOL_TO_INT(_communicationStruct.out.RowDone);

_msgToSend.stTel.myBool[10] := BOOL_TO_INT(_communicationStruct.out.FotoDone);
_msgToSend.stTel.myInt[1]   := _communicationStruct.out.PalletPickIndex;
_msgToSend.stTel.myInt[3] := _communicationStruct.out.Locations.LocX;
_msgToSend.stTel.myInt[4] := _communicationStruct.out.Locations.LocY;
_msgToSend.stTel.myInt[5] := _communicationStruct.out.Locations.Roll;

//TEsten, start darf nur einmal ausgeführt werden
IF _start THEN
    _start := FALSE;
    n      := n + 1;
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="PositionCorrectionFactor" Id="{f845392d-f6bd-0652-086f-209d5a7a61a5}">
      <Declaration><![CDATA[METHOD PositionCorrectionFactor : BOOL
VAR_INST
	// Werte experimentiell mit Versuchen ermittelt
    averageValueX     : INT := 299;
    averageValueY     : INT := 286;
    avberageValueRoll : INT:= 0;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF THIS^._IvController.ID01StatusProp.Total_Status_OK THEN
    _communicationStruct.out.Locations.LocX :=
        averageValueX - this^._arrayOfPositionValuesInMillimeterX[_communicationStruct.out.PalletPickIndex];

    _communicationStruct.out.Locations.LocY :=
        averageValueY - THIS^._arrayOfPositionValuesInMillimeterY[_communicationStruct.out.PalletPickIndex];

    _communicationStruct.out.Locations.Roll :=
        avberageValueRoll - THIS^._arrayOfPositionValuesInMillimeterTheta[_communicationStruct.out.PalletPickIndex];
ELSE
    _communicationStruct.out.Locations.LocX := 0;
    _communicationStruct.out.Locations.LocY := 0;
    _communicationStruct.out.Locations.Roll := 0;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="RunCommunication" Id="{12f7af0b-cc56-027d-0c46-2e2d628f4c9d}" FolderPath="Communication\">
      <Declaration><![CDATA[METHOD PRIVATE RunCommunication

]]></Declaration>
      <Implementation>
        <ST><![CDATA[ _comRob(_msgSend:= _msgToSend, _msgRcv:= _msgReceive);
 
 MapComRob();]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>