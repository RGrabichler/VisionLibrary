<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="TcpClient" Id="{f1ce0ed0-fba2-0227-3547-3b762e23bed7}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK TcpClient
VAR_INPUT
    NetId      : STRING; (* Server AmsNetId *)
    ServerAdr  : STRING; (* Server IP address *)
    ServerPort : UDINT;  (* Server port number *)
    sSend      : STRING; (* String to be sent *)
    bConnect   : BOOL; 
END_VAR
VAR_OUTPUT
    sReceive : STRING; (* String received *)
    bBusy    : BOOL;
    err      : BOOL;
    errid    : UDINT;
END_VAR
VAR
    fbSocketCloseAll : FB_SocketCloseAll := (sSrvNetID := '', tTimeout := DEFAULT_ADS_TIMEOUT);
    bCloseAll        : BOOL              := TRUE;

    Timeout         : TIME := T#10S;
    fbSocketConnect : FB_SocketConnect;
    fbSocketReceive : FB_SocketReceive;
    fbSocketAccept  : FB_SocketAccept;
    fbSocketSend    : FB_SocketSend;
    hListen         : T_HSOCKET;
    hSocket         : T_HSOCKET;

    bConnAccepted : BOOL;
    RxBuffer      : STRING;
    state         :
        (STATE_INIT
        , STATE_CONNECTING
        , STATE_RECEIVING_DATA
        , STATE_SENDING_DATA
        , STATE_PROCESSING_DATA);

    timer : TON;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[fbSocketConnect
(
    sSrvNetId     := NetId
    , sRemoteHost := ServerAdr
    , nRemotePort := ServerPort
    , bExecute    :=
    , tTimeout    := Timeout
    , bBusy       => bBusy
    , bError      => err
    , nErrId      => errid
    , hSocket     => hSocket
);

fbSocketSend
(
    sSrvNetId  := NetId
    , hSocket  := hSocket
    , cbLen    := LEN(sSend)
    , pSrc     := ADR(sSend)
    , bExecute :=
    , tTimeout := Timeout
    , bBusy    => bBusy
    , bError   => err
    , nErrId   => errid
);

fbSocketReceive
(
    sSrvNetId   := NetId
    , hSocket   := hSocket
    , cbLen     := SIZEOF(RxBuffer)
    , pDest     := ADR(RxBuffer)
    , bExecute  :=
    , tTimeout  := Timeout
    , bBusy     => bBusy
    , bError    => err
    , nErrId    => errid
    , nRecBytes =>
);

CASE state OF
    STATE_INIT:
        //Open the port
        IF bConnect THEN
            fbSocketConnect.bExecute := TRUE;
            state                    := STATE_CONNECTING;
        END_IF

    STATE_CONNECTING:
        fbSocketConnect.bExecute := FALSE;

        //Accept incoming connection every half a second
        IF NOT fbSocketConnect.bBusy AND NOT fbSocketConnect.bError THEN
            Tc2_System.ADSLOGSTR
            (
                msgCtrlMask := Tc2_System.ADSLOG_MSGTYPE_LOG
                , msgFmtStr := 'Client Connected %s'
                , strArg    := 'jaaaa'
            );

            state := STATE_SENDING_DATA;
        END_IF

    STATE_RECEIVING_DATA:
        fbSocketReceive.bExecute := FALSE;

        IF NOT fbSocketReceive.bBusy AND NOT fbSocketReceive.bError THEN
            IF fbSocketReceive.nRecBytes = 0 THEN
                //if there's no data received, reset the fbSocketReceive
                fbSocketReceive.bExecute := TRUE;
            ELSE
                MEMSET(ADR(sReceive), 0, SIZEOF(sReceive));
                MEMCPY(ADR(sReceive), fbSocketReceive.pDest, fbSocketReceive.nRecBytes);
                fbSocketSend.bExecute := TRUE;
                state                 := STATE_SENDING_DATA;
            END_IF
        END_IF

    STATE_SENDING_DATA:
        fbSocketSend.bExecute := FALSE;

        IF NOT fbSocketSend.bBusy AND NOT fbSocketSend.bError THEN
            fbSocketReceive.bExecute := TRUE;
            state                    := STATE_RECEIVING_DATA;
        END_IF
END_CASE
]]></ST>
    </Implementation>
  </POU>
</TcPlcObject>